/********************************************
* Автор: Усиков С.А                         *
* Дата: 26.02.2023                          *
* Название: 3                               *
*********************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task3Programming
{
  class SquareMatrix : IComparable
  {
    private int[,] Matrix;
    public float Determinant = new Random().Next(1, 10);
    public byte Size = 5;
    public DeepStructure DS;
    public SquareMatrix()
    {
      Matrix = new int[Size, Size];
      DS = new DeepStructure();
    }
    public void FillRandom()
    {
      for (int Line = 0; Line < Size; ++Line)
      {
        for (int Column = 0; Column < Size; ++Column)
        {
          Matrix[Line, Column] = new Random().Next(1, 10);
        }
      }
      for (int Line = 0; Line < Size; ++Line)
      {
        for (int Column = 0; Column < Size; ++Column)
        {
          Console.Write("{0} ", Matrix[Line, Column]);
        }
        Console.WriteLine();
      }
      Console.WriteLine("Определитель: {0}\n", Determinant);
    }
    public static float operator /(SquareMatrix FirstMatrix, SquareMatrix SecondMatrix)
    {
      return FirstMatrix.Determinant / SecondMatrix.Determinant;
    }
    public static float operator *(SquareMatrix FirstMatrix, SquareMatrix SecondMatrix)
    {
      return FirstMatrix.Determinant * SecondMatrix.Determinant;
    }
    public static float operator +(SquareMatrix FirstMatrix, SquareMatrix SecondMatrix)
    {
      return FirstMatrix.Determinant + SecondMatrix.Determinant;
    }
    public static float operator -(SquareMatrix FirstMatrix, SquareMatrix SecondMatrix)
    {
      return FirstMatrix.Determinant - SecondMatrix.Determinant;
    }
    public static bool operator ==(SquareMatrix FirstMatrix, SquareMatrix SecondMatrix)
    {
      return FirstMatrix.Determinant == SecondMatrix.Determinant;
    }
    public static bool operator !=(SquareMatrix FirstMatrix, SquareMatrix SecondMatrix)
    {
      return FirstMatrix.Determinant != SecondMatrix.Determinant;
    }
    public override bool Equals(object Other)
    {
      if (Other == null)
      {
        return false;
      }

      if (!(Other is SquareMatrix))
      {
        return false;
      }
      return (this.Matrix == ((SquareMatrix)Other).Matrix);
    }
    public override int GetHashCode()
    {
      int HashCode = 0;
      for (int stroke = 0; stroke < Size; ++stroke)
      {
        for (int column = 0; column < Size; ++column)
        {
          HashCode += Matrix[stroke, column];
        }
      }
      return HashCode;
    }
    public int CompareTo(object Object)
    {
      if (Object == null)
      {
        return 1;
      }

      SquareMatrix OtherMatrix = Object as SquareMatrix;

      if (OtherMatrix == null)
      {
        throw new ArgumentException("Object is not a Matrix");
      }

      return CompareTo(OtherMatrix);
    }
    public override string ToString()
    {
      return base.ToString();
    }
  }

  class ShallowCloneMatrix : SquareMatrix, ICloneable
  {
    public object Clone()
    {
      return (SquareMatrix)this.MemberwiseClone();
    }
  }

  class DeepStructure
  {
    public int A { get; set; }
  }

  class Program
  {
    static void Main(string[] args)
    {
      SquareMatrix Matrix1 = new SquareMatrix();
      Matrix1.FillRandom();
      SquareMatrix Matrix2 = new SquareMatrix();
      Matrix2.FillRandom();

      double Result = Matrix1 * Matrix2;
      Console.WriteLine(Result);
      Result = Matrix1 - Matrix2;
      Console.WriteLine(Result);

      ShallowCloneMatrix ClonedMatrix = new ShallowCloneMatrix();
      ClonedMatrix.Determinant = 2;
      ShallowCloneMatrix ClonedMatrix2 = (ShallowCloneMatrix)ClonedMatrix.Clone();
      ClonedMatrix.Determinant = 1;
      Console.WriteLine(ClonedMatrix.Determinant);
      Console.WriteLine(ClonedMatrix2.Determinant);
    }
  }
}
